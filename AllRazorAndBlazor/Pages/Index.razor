@page "/"
@using System.ComponentModel;
@using AllRazorAndBlazor.Shared
@using Microsoft.AspNetCore.Components.Rendering;
@using AllRazorAndBlazor.Pages;
@using System.Globalization;
@attribute [Description("The Description")]
@inherits ComponentBase
@inject IService MyService
@implements IDisposable
@layout MainLayout
@namespace BlazorComponents
@preservewhitespace true

<PageTitle>Index</PageTitle>

<p>@MyService</p>
<p>@@MyService</p>
<a href="mailto:Support@contoso.com">Support@contoso.com</a>

<p>@DateTime.Now</p>
<p>@DateTime.Parse("1/1/1900", provider: null)</p>

<p>Last week this time: @(DateTime.Now - TimeSpan.FromDays(7))</p>

@{
    var abc = "xyz";
}
<p>Blah@(abc.Length)</p>

<p>@(MyService.DoSomething<int>())</p>

@{
    var inCSharp = true;
    <p>Now in HTML, was in C# @inCSharp</p>
}

@if (true)
{
    <text>Text @abc</text>
}

@for (var i = 0; i < 3; i++)
{
    @:Line: @i
}

<input type="checkbox" checked="@true" name="true" />
<input type="checkbox" checked="@false" name="false" />

@if (abc.Length == 0)
{
    <p>The length was zero.</p>
}
else if (abc.Length >= 1337)
{
    <p>The length is large.</p>
}
else
{
    <p>The length is small.</p>
}

@switch (abc.Length)
{
    case 1:
        <p>The length is 1!</p>
        break;
    case 1337:
        <p>The length is 1337!</p>
        break;
    default:
        <p>The length wasn't 1 or 1337.</p>
        break;
}

@foreach (var x in abc)
{
    <p>@x</p>
}

@{
    var j = 0;
}
@while (j < abc.Length)
{
    var character = abc[j];
    <p>@character</p>

    j++;
}

@{
    j = 0;
}
@do
{
    var character = abc[j];
    <p>@character</p>

    j++;
} while (j < abc.Length);


@using (MyService.GetDisposable())
{
    <p>Boo</p>
}

@try
{
    throw new InvalidOperationException("You did something invalid.");
}
catch (Exception ex)
{
    <p>The exception message: @ex.Message</p>
}
finally
{
    <p>The finally statement.</p>
}

@lock (abc)
{
    <p>Boo</p>
}

@{
    /* C# comment */
    // Another C# comment
}
<!-- HTML comment -->
@* Razor comment *@

@functions {
    public string GetHello()
    {
        return "Hello";
    }

    private void RenderName(RenderTreeBuilder __builder, string name)
    {
        <p>Name: <strong>@name</strong></p>
    }
}

<p>From method: @GetHello()</p>
<p>
    @{
        RenderName(__builder, "David");
    }
</p>

@code {
    public string GetHello2()
    {
        return "Hello 2";
    }

    private void RenderName2(RenderTreeBuilder __builder, string name)
    {
        <p>Name 2: <strong>@name</strong></p>
    }
}

<p>From method: @GetHello2()</p>
<p>
    @{
        RenderName2(__builder, "David");
    }
</p>

@code {
    private bool _isDisposed;

    public void Dispose() => _isDisposed = true;
}

<Component Property="PropertyValue" SomeOther="hi there" OnClickCallback="ButtonClicked" />

<p>
    <input @ref="firstInput" @bind="InputValue" @bind:event="oninput" @bind:after="BindAfter" /> <br />
    <input @bind="InputValue" @bind:event="oninput" @bind:after="@(() => AfterValue = "AfterLambda: " + InputValue)" /> <br />
    <input type="text" @bind:get="InputValue" @bind:set="Set" /><br />
    <input type="text" @bind:get="InputValue" @bind:set="@(v => InputValue = "Lambda: " + v)" /><br />
    <InputText @bind-Value="InputValue" @bind-Value:event="ValueChanged" @bind-Value:after="BindAfter" /><br />
    <InputText @bind-Value="InputValue" @bind-Value:event="ValueChanged" @bind-Value:after="@(() => AfterValue = "AfterLambda: " + InputValue)" /><br />
    <InputText @bind-Value:get="InputValue" @bind-Value:set="Set" /><br />
    <InputText @bind-Value:get="InputValue" @bind-Value:set="@(v => InputValue = "Lambda: " + v)" /><br />
    <input @bind="BoundDate" @bind:format="yyyy-MM-dd" /><br />
    <input @bind="BoundNumber" @bind:culture="Turkish" />
</p>

<ul>
    <li @key="InputValue">Input: @InputValue</li>
    <li>After: @AfterValue</li>
    <li>Date: @BoundDate</li>
</ul>

@code {
    private CultureInfo Turkish = CultureInfo.GetCultureInfo("de-DE");
    private string? InputValue { get; set; }
    private string? AfterValue { get; set; }
    private DateTime BoundDate = new(2020, 1, 1);
    private decimal BoundNumber = 1_542.23M;

    private void Set(string value)
    {
        InputValue = "Set: " + value;
    }

    private void BindAfter()
    {
        AfterValue = "After: " + InputValue;
    }
}

<button @onclick="ButtonClicked" @onclick:preventDefault @onclick:stopPropagation>@BoundNumber</button>
<button @onclick="@(() => BoundNumber++)" @onclick:preventDefault="shouldPreventDefault" @onclick:stopPropagation="true">@BoundNumber</button>

@code {
    private ElementReference firstInput;
    private bool shouldPreventDefault = true;

    private async Task ButtonClicked()
    {
        BoundNumber += 1.23M;
        await firstInput.FocusAsync();
    }
}